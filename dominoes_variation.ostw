import "main.ostw";

globalvar Number dominoesRadius = WorkshopSettingInteger("ºDominoes Variation", "Domino Radius", 20, 1, 200, 0);
globalvar Boolean dominoesAutoFillUltimate = WorkshopSettingToggle("ºDominoes Variation", "Domino Auto Fill Ultimate", true, 0);
globalvar Number dominoesMinDelay = WorkshopSettingInteger("ºDominoes Variation", "Domino Min Delay", 0, 0, 30, 10);
globalvar Number dominoesMaxDelay = WorkshopSettingInteger("ºDominoes Variation", "Domino Max Delay", 3, 0, 30, 20);
globalvar Boolean dominoTriggersAfterDeath = WorkshopSettingToggle("ºDominoes Variation", "Domino Triggers After Death", true, 30);
globalvar Number initialDominoesCooldown = WorkshopSettingInteger("ºDominoes Variation", "Player Domino Cooldown", 5, 1, 30, 100);

playervar Number dominoesCooldown;
playervar Boolean triggerDomino;

rule: "If player is flagged to trigger a domino, send the appropriate events to the main script"
Event.OngoingPlayer
if (triggerDomino)
{
  triggerDomino = false;
  AbortIf(dominoesCooldown > 0);

  # Wait for a random delay between the min and max delay
  Number delay = RandomInteger(dominoesMinDelay, dominoesMaxDelay);

  if (!dominoTriggersAfterDeath) {
    WaitUntil(IsDead(), delay);
    AbortIf(IsDead());
  } else {
    Wait(delay);
  }

  AbortIf(!dominoesAutoFillUltimate && UltimateChargePercent() != 100);

  SetUltimateCharge(EventPlayer(), 100);

  while (ultimateState == UltimateState.NORMAL) {
    PressButton(EventPlayer(), Button.Ultimate);
    Wait(0.1);
  }
}

rule: "When a player moves out of the NORMAL state, flag all players nearby to trigger a domino"
Event.OngoingPlayer
if (ultimateState == UltimateState.NORMAL)
{
  WaitUntil(ultimateState != UltimateState.NORMAL, 1000000);
  PlayersWithinRadius(EventPlayer().Position(), dominoesRadius, Team.All, RadiusLOS.Off).FilteredArray((p) => p.IsAlive()).triggerDomino = true;
  dominoesCooldown = initialDominoesCooldown;
  ChaseVariableOverTime(dominoesCooldown, 0, initialDominoesCooldown, TimeChaseReevaluation.None);
}
